			
#######################
Day-8 - 12th July 2023
#######################	

	Install Jenkins ==> https://www.jenkins.io/doc/book/installing/
	
	Linux - Package Manager 	- used to install and manage the software packages in Linux
		apt-get 
		yum
		rpm
		dnf 
		
		
	1. Launch AWS Ubuntu Machine.
			--> Goto security groups and edit inbound rule.
			
	1.1 Connect to AWS EC2 Instance :
			EC2 Instance Connect 
			SSH Clients 	--> MobaXterm/Putty
			Terminal
			
	
	2. Install Jenkins 					---> It run as a web service - in its default port 8080
			
	3. Configure Jenkins.

Install JDK :

sudo apt update
sudo apt install openjdk-17-jre
java -version		

			
Install Jenkins :

curl -fsSL https://pkg.jenkins.io/debian-stable/jenkins.io-2023.key | sudo tee \
  /usr/share/keyrings/jenkins-keyring.asc > /dev/null
echo deb [signed-by=/usr/share/keyrings/jenkins-keyring.asc] \
  https://pkg.jenkins.io/debian-stable binary/ | sudo tee \
  /etc/apt/sources.list.d/jenkins.list > /dev/null
sudo apt-get update
sudo apt-get install jenkins	


systemctl status jenkins
systemctl stop jenkins
systemctl start jenkins
systemctl restart jenkins
systemctl enable jenkins


--> Post Installation Activities for Jenkins .
		- Access it thru external Ip address and port 8080
		- Install all the default components
		
	Jenkins Plugins :::
		
			Plugins are extensions to perform any action in jenkins.
			
	
	Managing Plugins  ::
	
	
	Jenkins Project/Job
			Projectt/Jobs :
				Free-Style Project 
				Pipeline Project 
					Pipeline Scripts written using Groovy Scripting Lang.
						- Scripted Pipeline 
						- Declarative Pipeline
					
Summary :
				- Installation of Jenkins 
				- Managing Plugins 
				- Manage Users
				- Manage Users' Access Control 
				- Create a freestyle project and check the console output.
				

#######################
Day-9 - 13th July 2023
#######################	

				Jenkins Project/Job
						Projectt/Jobs :
							Free-Style Project 
							Pipeline Project 
								Pipeline Scripts written using Groovy Scripting Lang.
									- Scripted Pipeline 
									- Declarative Pipeline			- 

				Handling Variables/Parameters
				
					Jenkins Variables:
						- Environment/SYSTEM/JOB Variables						
						- User Defined Variables
					
				Create Jenkins Pipeline
				5 Environments - to deploy my appln. in 5 envi.
				
				
				Pipeline Project 
					Pipeline Scripts written using Groovy Scripting Lang.
						- Scripted Pipeline 
								
- Declarative Pipeline					


			src_code --> commit to git hub 			# Done by developers
			
			build 			Build tool - Maven -
						Maven is one of the build tools used to compile the src code,create artifacts,perform automated UT 
						Maven Goal - clean, test, build, package 
						
				compile the src code 
				create artifacts 
			perform unit testing
			publish the appln to target environment ( QA )
	


				
pipeline {
    agent any

    stages {
        stage('SCM Checkout') {
            steps {
                echo 'Hello World'
            }
        }
        stage('Build') {
            steps {
                echo 'Hello World'
            }
        }
        stage('Deploy the artifacts to QA Envi.') {
            steps {
                echo 'Hello World'
            }
        }
        stage('QA Automated Testing') {
            steps {
                echo 'Hello World'
            }
        }
        stage('Deploy the artifacts to UAT Envi.') {
            steps {
                echo 'Hello World'
            }
        }
        stage('UAT Automated Testing') {
            steps {
                echo 'Hello World'
            }
        }
        stage('Deploy the artifacts to PROD Envi.') {
            steps {
                echo 'Hello World'
            }
        }
    }
}		





pipeline {
    agent any

    tools {
        // Install the Maven version configured as "M3" and add it to the path.
        maven "M3"
    }

    stages {
        stage('Build') {
            steps {
                // Get some code from a GitHub repository
                git 'https://github.com/jglick/simple-maven-project-with-tests.git'

                // Run Maven on a Unix agent.
                sh "mvn -Dmaven.test.failure.ignore=true clean package"

                // To run Maven on a Windows agent, use
                // bat "mvn -Dmaven.test.failure.ignore=true clean package"
            }

            post {
                // If Maven was able to run the tests, even if some of the test
                // failed, record the test results and archive the jar file.
                success {
                    junit '**/target/surefire-reports/TEST-*.xml'
                    archiveArtifacts 'target/*.jar'
                }
            }
        }
    }
}
	
	
	
Eg. for Scripted Pipeline :

node {
    def mvnHome
    stage('Preparation') { // for display purposes
        // Get some code from a GitHub repository
        git 'https://github.com/jglick/simple-maven-project-with-tests.git'
        // Get the Maven tool.
        // ** NOTE: This 'M3' Maven tool must be configured
        // **       in the global configuration.
        mvnHome = tool 'M3'
    }
    stage('Build') {
        // Run the maven build
        withEnv(["MVN_HOME=$mvnHome"]) {
            if (isUnix()) {
                sh '"$MVN_HOME/bin/mvn" -Dmaven.test.failure.ignore clean package'
            } else {
                bat(/"%MVN_HOME%\bin\mvn" -Dmaven.test.failure.ignore clean package/)
            }
        }
    }
    stage('Results') {
        junit '**/target/surefire-reports/TEST-*.xml'
        archiveArtifacts 'target/*.jar'
    }
}


python script/shell script/yaml scripts/groovy scripts

Jenkins ::: Groovy 

Az Pipeline			yaml scripts.
AWS Codepipeline 
gitlab-ci 



Jenkins Master-Slave Architecture :::

		Jenkins_Master 	VM 		--> Is used to create/Manage Jenkins Jobs. And it is used to Schedule the Jobs to Slave Nodes.
			Slave1			--> Java Application		workspace 	
			Slave2			--> Python Application
			Slave3			--> Node JS
			Slave4			--> Angular
		
				- Create and Configure Jenkins Master/Slave Architecture
				- Manage Jenkins Nodes/Slave Machines 
				
		
		Jenkins_Master 
		Jenkins_Slave_Node1
				Install git,jdk,maven 
				
				Create the user
					Authentication::
						password based auth.
						token based auth.
						key based auth. 
							private key & Public keys
						passwordless auth.
				SSH Connection


		Launch 1 VM for Slave Node1
		
		
		Jenkins node Configuration!


		Next ::: 

pipeline {
    agent { label 'slave1' }

    stages {
        stage('SCM Checkout') {
            steps {
                echo 'Perform SM Checkout'
				git 'https://github.com/LoksaiETA/Java-mvn-app2'
            }
        }
        stage('Build') {
            steps {
                echo 'Hello World'
            }
        }
    }
}		

#######################
Day-10 - 14th July 2023
#######################	

		Jenkins - CI/CD Pipeline 
		Test Server Configuration using Tomcat
		Integration of test server
		Build Triggers
		
		
pipeline {
    agent { label 'slave1' }

    tools {
        // Install the Maven version configured as "M3" and add it to the path.
        maven "maven-3.6.3"
    }
	
    stages {
        stage('SCM Checkout') {
            steps {
                echo 'Perform SM Checkout'
				git 'https://github.com/LoksaiETA/Java-mvn-app2'
            }
        }
        stage('Build') {
            steps {
                echo 'Perform Build'
				sh "mvn -Dmaven.test.failure.ignore=true clean package"
            }
        }
    }
}

Maven --> 

	pom.xml file 
	MAVEN Repository
	
	Maven Build --> Using Maven goals 
	
		clean
		
		build
		test
		package 
		
	target/*.war			==> Artifactory Library/Repositories - JFrog Artifactory
	
	

	CICD

pipeline {
    agent { label 'slave1' }

    tools {
        // Install the Maven version configured as "M3" and add it to the path.
        maven "maven-3.6.3"
    }
	
    stages {
        stage('SCM Checkout') {
            steps {
                echo 'Perform SM Checkout'
				git 'https://github.com/LoksaiETA/Java-mvn-app2'
            }
        }
        stage('Build') {
            steps {
                echo 'Perform Build'
				sh "mvn -Dmaven.test.failure.ignore=true clean package"
            }
        }
    }
}	


	code(artifacts) promotion/publish/deploy/ 

	Non-Prod							PROD (release)
	
	DEV 
	QA 
	UAT 				===> 			prod servers 
	

	Launch QA Server 
		Install Tomcat/nginx - Web Application Server 	--> Run as a service in default port 8080
		
		
	Deployment ???
	
	
		Copying the artifacts from source server to target server :::
		
		
		Source - Jenkins_Slave1	==> target/*.war 
		
		Target - QA Server 		==> /opt/tomcat/webapps/*.war
		
		Perform this deployment as a devopsadmin user.
		
	Connect/Attach Tomcat server to Jenkins Master ::
	
		Install Publish over SSH Plugins to connect any remote server to jenkins and share the artifacts.
		
		
Summary :::

		Create CICD pipeline -- perform shcm checkout/build/Create artifacts using Maven 
		Launch QA Server 
			Install Tomcat, with valid user 
		Install Publish over ssh plugins in jenkins master.
		
Next :::

	Connect to tomcat using Jenkins Master.
		
		
		
		
		

#######################
Day-11 - 17th July 2023
#######################			
		
		Launch QA Server  -
		Hosted Server/Target Server (VM)
			Install Tomcat/nginx(80) - Web Application Server 	--> Run as a service in default port 8080
			
			
		Configure Tomcat Server ::
		How to Connect the tomcat server with Jenkins Master.
		
		
		Create the CICD Pipeline
		Build Triggers 
		Email Notifications.
		
		Build Triggers ::
			Used to automate the Builds :::
			
			Build Periodic:
					Is used to trigger the job based upon the schedule/crontab 
					This trigger is not related to source code changes. 
					
			PollSCM:
					Based upon the source code changes, we can schedule/crontab the jobs.
					Use Case1 :
						4 hrs once - I want to run my QA Test job.
						8AM,12noon
						between 8 and 12 , if there is any changes happened in the src_code, then only this will trigger the job.
					
					Use Case2 :
						Trigger the job for every 10 mins, only if there is any changes in source code.
					
			Test Cycle:::			
				app-team1,2,3,4,5 ==> project.				
				src_code. 4 hrs -- 8 am and 12 noon 12 noon test job will be triggered.
				
			GITHUB Webhook :
					Is used to trigger the build job as soon as there is a change in src_code repo.
					For every src_code change, build will get triggered. 
					
					Configure - github webhook in src_code Repo.
					
				http://15.206.127.38:8080/github-webhook/	
				
				http://52.66.197.160:8080/github-webhook/
				
		
		Email Notifications:::
		
			Jenkins :
					
pipeline {
    agent { label 'slave1' }

    tools {
        // Install the Maven version configured as "M3" and add it to the path.
        maven "maven-3.6.3"
    }
	
    stages {
        stage('SCM Checkout') {
            steps {
                echo 'Perform SM Checkout'
				git 'https://github.com/LoksaiETA/Java-mvn-app2'
            }
        }
        stage('Build') {
            steps {
                echo 'Perform Build'
				sh "mvn -Dmaven.test.failure.ignore=true clean package"
            }
              post {
                failure {
                  sh "echo 'Send mail on failure'"
					mail bcc: '', body: "Please go to ${BUILD_URL} and verify the build", cc: 'l3@gmail.com', from: '', replyTo: '', subject: 'Build Notification', to: 'l3@gmail.com'
                }
              }
        }
        stage('Deploy to Tomcat_Server') {
            steps {
		script {
			sshPublisher(publishers: [sshPublisherDesc(configName: 'TomcatAppServer', transfers: [sshTransfer(cleanRemote: false, excludes: '', execCommand: '', execTimeout: 120000, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: '.', remoteDirectorySDF: false, removePrefix: 'target/', sourceFiles: 'target/mvn-hello-world.war')], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: false)])			
			}
            }
		  post {
			success {
			  sh "echo 'Send mail on success'"
				mail bcc: '', body: "Please go to ${BUILD_URL} and verify the build", cc: 'l3@gmail.com', from: '', replyTo: '', subject: 'Build Notification', to: 'l3@gmail.com'
			}
			failure {
			  sh "echo 'Send mail on failure'"
				mail bcc: '', body: "Please go to ${BUILD_URL} and verify the build", cc: 'l3@gmail.com', from: '', replyTo: '', subject: 'Build Notification', to: 'l3@gmail.com'
			}
		  }

		}		
    }
}	
	
			Jenkins Notifications ::::
			
				When the job/stage --> Successful/Failure/Unstable/Aborted

Email Notification Plugins :::

SMTP Server :
smtp.gmail.com

SMTP Authentication

SMTP Port :: 465

Login to Gmail :::

Click Account Settings

select Security 

MFA --> mobile#
App Password = 16
What ? window
Which Appln - email


Next Ansible :::

